/* vim: set ft=c: */
#include <assert.h>
#include <syslog.h>
#include <time.h>
#include <stdlib.h>
#include <arpa/inet.h>

#include "bd.h"
#include "paquete.h"

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error en caso de ocurrir alguno
 */
void print_sqlca();

EXEC SQL WHENEVER SQLERROR CALL print_sqlca();
EXEC SQL WHENEVER SQLWARNING SQLPRINT;


/**
 * bd_conectar()
 * -------------------------------------------------------------------------
 * Conecta con la base de datos
 */
int bd_conectar() {
    EXEC SQL CONNECT TO POSTGRES_CONNECTION_STRING USER POSTGRES_USER/
                                                        POSTGRES_PASSWD;
    if(sqlca.sqlcode == 0) syslog(LOG_INFO, "Base de datos conectada");
    return sqlca.sqlcode;
}

/**
 * bd_desconectar()
 * -------------------------------------------------------------------------
 * Desconecta con la base de datos
 */
void bd_desconectar() {
    EXEC SQL DISCONNECT ALL;
    syslog(LOG_INFO, "Base de datos desconectada");
}

/**
 * bd_commit()
 * -------------------------------------------------------------------------
 * Hace un commit de la transaccion en la base de datos
 */
void bd_commit() {
    EXEC SQL COMMIT;
}

/**
 * obtener_paquetes
 * -------------------------------------------------------------------------
 *  Obtiene los paquetes capturados segun configuracion pasada por parametro.
 *  Devuelve la cantidad de paquetes en el array de paquetes
 */
int obtener_paquetes(struct s_analizador* analizador,
                     int (*callback)(const struct s_analizador*,
                                     const struct paquete*))
{
    struct paquete paquete;
    int i;
    /* declaracion de variables usadas en postgres */
    EXEC SQL BEGIN DECLARE SECTION;
        const char *stmt = "SELECT ip_origen, ip_destino, puerto_origen, "
                                  "puerto_destino, protocolo, bytes, "
                                  "direccion "
                           "FROM paquetes "
                           "WHERE hora_captura "
                           "BETWEEN to_timestamp(?) "
                           "AND to_timestamp(?)";
        const char *count = "SELECT count(1)"
                            "FROM paquetes "
                            "WHERE hora_captura "
                            "BETWEEN to_timestamp(?) "
                            "AND to_timestamp(?)";
        typedef struct {
            int ip_origen;
            int ip_destino;
            int puerto_origen;
            int puerto_destino;
            int protocolo;
            int bytes;
            int direccion;
        } t_paquete;
        t_paquete *paquetes;
        int cantidad;
        long int t_min, t_max; /* intervalo de analisis */
    EXEC SQL END DECLARE SECTION;

    t_min = analizador->tiempo_inicio;
    t_max = analizador->tiempo_fin;
    syslog(LOG_DEBUG,
           "Se analizaran paquetes capturados desde %s",
           ctime(&(analizador->tiempo_inicio)));
    syslog(LOG_DEBUG,
           "Se analizaran paquetes capturados hasta %s",
           ctime(&(analizador->tiempo_fin)));


    /* preparo consultas */
    EXEC SQL PREPARE stmt1 FROM :stmt;
    EXEC SQL PREPARE count1 FROM :count;

    /* obtengo la cantidad de filas necesarias */
    EXEC SQL EXECUTE count1 INTO :cantidad USING :t_min, :t_max;

    /* obtengo la memoria necesaria para cargar todas las filas e inicializo la
     * seccion de memoria con ceros.
     */
    paquetes = malloc(sizeof(t_paquete) * cantidad);
    if (paquetes == NULL) {
        fprintf(stderr,
                "No hay memoria disponible para analizar %d paquetes\n",
                cantidad);
        syslog(LOG_ERR,
               "No hay memoria disponible para analizar %d paquetes",
               cantidad);
        exit(EXIT_FAILURE);
    }
    memset(paquetes, 0, sizeof(t_paquete) * cantidad);

    /* obtengo los paquetes */
    EXEC SQL EXECUTE stmt1 INTO :paquetes USING :t_min, :t_max;

    #pragma omp parallel for private(i, paquete)
    for(i = 0; i < cantidad; i++) {
        paquete.origen.s_addr = htonl((paquetes + i)->ip_origen);
        paquete.destino.s_addr = htonl((paquetes + i)->ip_destino);
        paquete.puerto_origen = (paquetes + i)->puerto_origen;
        paquete.puerto_destino = (paquetes + i)->puerto_destino;
        paquete.protocolo = (paquetes + i)->protocolo;
        paquete.bytes = (paquetes + i)->bytes;
        paquete.direccion = (paquetes + i)->direccion;
        /* analizo paquete */
        callback(analizador, &paquete);
    }
    /* libero recursos */
    EXEC SQL COMMIT;
    free(paquetes);
    return cantidad;
}

/**
 * obtener_clases
 * ---------------------------------------------------------------------------
 *  Obtiene el array de clases de trafico que se utilizara en el analisis.
 *  Devuelve la cantidad de clases que contiene el array
 */
int obtener_clases(struct s_analizador *analizador)
{
    struct clase *clase;
    int i;
    EXEC SQL BEGIN DECLARE SECTION;
        const char *stmt = "SELECT id_clase, nombre, descripcion "
                           "FROM clase_trafico";
        const char *count = "SELECT count(1) "
                            "FROM clase_trafico";
        typedef struct {
            int id_clase;
            char nombre[LONG_NOMBRE];
            char descripcion[LONG_DESCRIPCION];
        } t_clase;
        t_clase *clases;
        int cantidad;
    EXEC SQL END DECLARE SECTION;

    /* preparo consultas */
    EXEC SQL PREPARE stmt1 FROM :stmt;
    EXEC SQL PREPARE count1 FROM :count;

    /* obtengo la cantidad de filas necesarias */
    EXEC SQL EXECUTE count1 INTO :cantidad;

    /* obtengo la memoria necesaria para cargar todas las filas e inicializo la
     * seccion de memoria con ceros.
     */
    clases = malloc(sizeof(t_clase) * cantidad);
    if (clases == NULL) {
        syslog(LOG_ERR,
               "No hay memoria disponible para cargar %d clases",
               cantidad);
        exit(EXIT_FAILURE);
    }
    memset(clases, 0, sizeof(t_clase) * cantidad);

    /* obtengo las clases */
    EXEC SQL EXECUTE stmt1 INTO :clases;

    /* creo array de clases de trafico */
    analizador->cant_clases = cantidad + 1;
    analizador->clases = malloc(sizeof(struct clase) * (cantidad + 1));
    if (analizador->clases == NULL) {
        syslog(LOG_ERR,
               "No hay memoria disponible para cargar %d clases de trafico",
               cantidad);
        exit(EXIT_FAILURE);
    }

    /* la primera clase es por defecto */
    init_clase(analizador->clases);
    strncpy(analizador->clases->nombre,
            "Default",
            LONG_NOMBRE);
    strncpy(analizador->clases->descripcion,
            "Clase por defecto para paquetes que no coinciden con ninguna otra"
            " clase de trafico instalada",
            LONG_DESCRIPCION);
    
    /* cargo clases de trafico instaladas */
    for(i = 0; i < cantidad; i++) {
        clase = analizador->clases + i + 1; /* sumo uno por clase por defecto */
        init_clase(clase);
        clase->id = (clases + i)->id_clase;
        strncpy(clase->nombre, (clases + i)->nombre, LONG_NOMBRE);
        strncpy(clase->descripcion, (clases + i)->descripcion,
                LONG_DESCRIPCION);
        obtener_subredes(clase, 'a');
        obtener_subredes(clase, 'b');
        obtener_puertos(clase, 'a');
        obtener_puertos(clase, 'b');
    }

    /* libero recursos */
    EXEC SQL COMMIT;
    free(clases);
    return cantidad;
} /* fin obtener_clases */

/**
 * free_clase
 * --------------------------------------------------------------------------
 *  Libera memoria ocupada por una clase de trafico
 */
void free_clase(struct clase *clase) {
    free(clase->subredes_a);
    free(clase->subredes_b);
    free(clase->puertos_a);
    free(clase->puertos_b);
}

/**
 * obtener_subredes(*clase)
 * ---------------------------------------------------------------------------
 *  Obtiene el array de subredes que componen la clase de trafico.
 *  Devuelve la cantidad de subredes que contiene el array
 *
 *  Carga tanto grupo A como grupo B.
 *
 */
int obtener_subredes(struct clase* clase, char grupo)
{
    struct subred **array, /* almacena el array de subredes */
                  *subred; /* itera sobre el array */
    int i, /* itera sobre el resultset de la consulta */
        *size; /* almacena la cantidad de elementos en el array */

    EXEC SQL BEGIN DECLARE SECTION;
        const char *query = "SELECT direccion, prefijo "
                           "FROM v_clase_cidr "
                           "WHERE id_clase = ? "
                           "AND grupo = ?";
        const char *count = "SELECT count(1) "
                            "FROM v_clase_cidr " 
                            "WHERE id_clase = ? "
                            "AND grupo = ?";
        typedef struct {
            char direccion[INET_ADDRSTRLEN];
            unsigned int prefijo;
        } t_cidr;
        t_cidr *cidr;
        t_cidr *it;
        char _grupo;
        int cantidad;
        int id_clase;
    EXEC SQL END DECLARE SECTION;

    /* defino el grupo de trabajo */
    assert(grupo == 'a' || grupo == 'b');
    _grupo = grupo;
    if(grupo == 'a') {
        array = &(clase->subredes_a);
        size = &(clase->cant_subredes_a);
    } else if(grupo == 'b') {
        array = &(clase->subredes_b);
        size = &(clase->cant_subredes_b);
    }

    /* preparo consultas */
    EXEC SQL PREPARE sqlquery FROM :query;
    EXEC SQL PREPARE sqlcount FROM :count;

    /* obtengo la cantidad de filas necesarias */
    id_clase = clase->id;
    EXEC SQL EXECUTE sqlcount INTO :cantidad USING :id_clase, :_grupo;

    /* obtengo la memoria necesaria para cargar todas las filas */
    cidr = malloc(sizeof(t_cidr) * cantidad);
    if (cidr == NULL) {
        syslog(LOG_ERR,
               "No hay memoria disponible para cargar %d cidr",
               cantidad);
        exit(EXIT_FAILURE);
    }
    /* inicializo la seccion de memoria con ceros. */
    memset(cidr, 0, sizeof(t_cidr) * cantidad);

    /* obtengo las subredes */
    EXEC SQL EXECUTE sqlquery INTO :cidr USING :id_clase, :_grupo;

    /* creo array de subredes */
    *size = cantidad;
    *array = malloc(sizeof(struct subred) * cantidad);
    if (*array == NULL) {
        syslog(LOG_CRIT,
               "No hay memoria disponible para cargar %d subredes",
               cantidad);
        exit(EXIT_FAILURE);
    }

    /* cargo subredes */
    for(i = 0; i < cantidad; i++) {
        subred = *array + i;
        it = cidr + i;
        /* obtengo direccion de red en formato binario */
        inet_pton(AF_INET, it->direccion, &(subred->red));
        /* obtengo mascara de subred en formato binario a traves de su prefijo.
         */
        if (it->prefijo == 32) {
            subred->mascara = MASCARA_HOST;
        } else if (it->prefijo < 32) {
            subred->mascara = GET_MASCARA(it->prefijo);
        }
    }

    /* libero recursos */
    EXEC SQL COMMIT;
    free(cidr);
    return cantidad;
} /* fin obtener_subredes */

/**
 * obtener_puertos(*clase)
 * ---------------------------------------------------------------------------
 *  Obtiene el array de puertos que componen la clase de trafico.
 *  Devuelve la cantidad de puertos que contiene el array
 *
 *  Carga tanto grupo A como grupo B.
 *
 *  TODO: Falta cargar grupo B
 */
int obtener_puertos(struct clase* clase, char grupo)
{
    struct puerto **array; /* almacena el array de puertos */
    int i, /* itera sobre el resultset de la consulta */
        *size; /* almacena la cantidad de elementos en el array */
    EXEC SQL BEGIN DECLARE SECTION;
        const char *query = "SELECT numero, protocolo "
                            "FROM v_clase_puerto "
                            "WHERE id_clase = ? "
                            "AND grupo = ?";
        const char *count = "SELECT count(1) "
                            "FROM v_clase_puerto " 
                            "WHERE id_clase = ? "
                            "AND grupo = ?";
        typedef struct {
            int numero;
            int protocolo;
        } t_puerto;
        t_puerto *puertos;
        char _grupo;
        int cantidad;
        int id_clase;
    EXEC SQL END DECLARE SECTION;

    /* defino el grupo de trabajo */
    assert(grupo == 'a' || grupo == 'b');
    _grupo = grupo;
    if(grupo == 'a') {
        array = &(clase->puertos_a);
        size = &(clase->cant_puertos_a);
    } else if(grupo == 'b') {
        array = &(clase->puertos_b);
        size = &(clase->cant_puertos_b);
    }

    /* preparo consultas */
    EXEC SQL PREPARE sqlquery FROM :query;
    EXEC SQL PREPARE sqlcount FROM :count;

    /* obtengo la cantidad de filas necesarias */
    id_clase = clase->id;
    EXEC SQL EXECUTE sqlcount INTO :cantidad USING :id_clase, :_grupo;

    /* obtengo la memoria necesaria para cargar todas las filas */
    puertos = malloc(sizeof(t_puerto) * cantidad);
    if (puertos == NULL) {
        syslog(LOG_ERR,
               "No hay memoria disponible para cargar %d puertos",
               cantidad);
        exit(EXIT_FAILURE);
    }
    /* inicializo la seccion de memoria con ceros. */
    memset(puertos, 0, sizeof(t_puerto) * cantidad);

    /* obtengo los puertos */
    EXEC SQL EXECUTE sqlquery INTO :puertos USING :id_clase, :_grupo;

    /* creo array de puertos */
    *size = cantidad;
    *array = malloc(sizeof(struct puerto) * cantidad);
    if (*array == NULL) {
        syslog(LOG_CRIT,
               "No hay memoria disponible para cargar %d puertos",
               cantidad);
        exit(EXIT_FAILURE);
    }

    /* cargo puertos */
    for(i = 0; i < cantidad; i++) {
        memcpy(*array + i, puertos + i, sizeof(struct puerto));
    }

    /* libero recursos */
    EXEC SQL COMMIT;
    free(puertos);
    return cantidad;
} /* fin obtener_puertos */

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error de base de datos
 */
void print_sqlca() {
    syslog(LOG_ERR, "==== sqlca ====\n");
    syslog(LOG_ERR, "sqlcode: %ld\n", sqlca.sqlcode);
    syslog(LOG_ERR, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
    syslog(LOG_ERR, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
    syslog(LOG_ERR, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],
                                                          sqlca.sqlerrd[1],
                                                          sqlca.sqlerrd[2],
                                                          sqlca.sqlerrd[3],
                                                          sqlca.sqlerrd[4],
                                                          sqlca.sqlerrd[5]);
    syslog(LOG_ERR, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0],
                                                          sqlca.sqlwarn[1],
                                                          sqlca.sqlwarn[2],
                                                          sqlca.sqlwarn[3],
                                                          sqlca.sqlwarn[4],
                                                          sqlca.sqlwarn[5],
                                                          sqlca.sqlwarn[6],
                                                          sqlca.sqlwarn[7]);
    syslog(LOG_ERR, "sqlstate: %5s\n", sqlca.sqlstate);
    syslog(LOG_ERR, "===============\n");
    fprintf(stderr, "Error: %s\n", sqlca.sqlerrm.sqlerrmc);
    exit(sqlca.sqlcode);
}
