/* vim: set ft=c: */
#include <assert.h>
#include <syslog.h>
#include <stdlib.h>
#include <arpa/inet.h>

#include "bd.h"
#include "paquete.h"

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error en caso de ocurrir alguno
 */
void print_sqlca();

EXEC SQL WHENEVER SQLERROR CALL print_sqlca();
EXEC SQL WHENEVER SQLWARNING SQLPRINT;


/**
 * bd_conectar()
 * -------------------------------------------------------------------------
 * Conecta con la base de datos
 */
int bd_conectar() {
    EXEC SQL CONNECT TO POSTGRES_CONNECTION_STRING USER POSTGRES_USER/
                                                        POSTGRES_PASSWD;
    if(sqlca.sqlcode == 0) syslog(LOG_INFO, "Base de datos conectada");
    return sqlca.sqlcode;
}

/**
 * bd_desconectar()
 * -------------------------------------------------------------------------
 * Desconecta con la base de datos
 */
void bd_desconectar() {
    EXEC SQL DISCONNECT ALL;
    syslog(LOG_INFO, "Base de datos desconectada");
}

/**
 * bd_commit()
 * -------------------------------------------------------------------------
 * Hace un commit de la transaccion en la base de datos
 */
void bd_commit() {
    EXEC SQL COMMIT;
}

/**
 * get_paquetes(**paquetes, *cfg)
 * -------------------------------------------------------------------------
 * Obtiene los paquetes capturados segun configuracion pasada por parametro.
 * Devuelve la cantidad de paquetes en el array de paquetes
 */
int bd_paquetes(struct s_analizador *analizador,
                 int (*callback)(struct s_analizador*, struct paquete*))
{
    int cantidad = 0;
    struct paquete paquete;
    EXEC SQL BEGIN DECLARE SECTION;
        char *stmt = "SELECT ip_origen, ip_destino, puerto_origen,"
                     "       puerto_destino, protocolo, bytes, direccion "
                     "FROM paquetes;";
        int _origen,
            _destino,
            _puerto_origen,
            _puerto_destino,
            _protocolo,
            _bytes,
            _direccion;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL PREPARE stmt1 FROM :stmt;

    EXEC SQL DECLARE cursor1 CURSOR FOR stmt1;
    EXEC SQL OPEN cursor1;

    EXEC SQL WHENEVER NOT FOUND DO BREAK;

    while (1)
    {
        EXEC SQL FETCH cursor1 INTO :_origen,
                                    :_destino,
                                    :_puerto_origen,
                                    :_puerto_destino,
                                    :_protocolo,
                                    :_bytes,
                                    :_direccion;
        paquete.origen.s_addr = htonl(_origen);
        paquete.destino.s_addr = htonl(_destino);
        paquete.puerto_origen = _puerto_origen;
        paquete.puerto_destino = _puerto_destino;
        paquete.protocolo = _protocolo;
        paquete.bytes = _bytes;
        paquete.direccion = _direccion;
        callback(analizador, &paquete);
        cantidad++;
    }

    EXEC SQL CLOSE cursor1;

    EXEC SQL COMMIT;
    return cantidad;
}

/**
 * print_sqlca()
 * -------------------------------------------------------------------------
 * Imprime error en caso de ocurrir alguno
 */
void print_sqlca() {
    syslog(LOG_ERR, "==== sqlca ====\n");
    syslog(LOG_ERR, "sqlcode: %ld\n", sqlca.sqlcode);
    syslog(LOG_ERR, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
    syslog(LOG_ERR, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
    syslog(LOG_ERR, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],
                                                          sqlca.sqlerrd[1],
                                                          sqlca.sqlerrd[2],
                                                          sqlca.sqlerrd[3],
                                                          sqlca.sqlerrd[4],
                                                          sqlca.sqlerrd[5]);
    syslog(LOG_ERR, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0],
                                                          sqlca.sqlwarn[1],
                                                          sqlca.sqlwarn[2],
                                                          sqlca.sqlwarn[3],
                                                          sqlca.sqlwarn[4],
                                                          sqlca.sqlwarn[5],
                                                          sqlca.sqlwarn[6],
                                                          sqlca.sqlwarn[7]);
    syslog(LOG_ERR, "sqlstate: %5s\n", sqlca.sqlstate);
    syslog(LOG_ERR, "===============\n");
    fprintf(stderr, "Error: %s\n", sqlca.sqlerrm.sqlerrmc);
    exit(EXIT_FAILURE);
}
